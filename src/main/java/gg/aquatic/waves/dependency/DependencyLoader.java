package gg.aquatic.waves.dependency;

import io.papermc.paper.plugin.loader.PluginClasspathBuilder;
import io.papermc.paper.plugin.loader.PluginLoader;
import io.papermc.paper.plugin.loader.library.impl.MavenLibraryResolver;
import org.eclipse.aether.artifact.DefaultArtifact;
import org.eclipse.aether.graph.Dependency;
import org.eclipse.aether.repository.RemoteRepository;
import xyz.jpenilla.gremlin.runtime.*;
import xyz.jpenilla.gremlin.runtime.platformsupport.DefaultsPaperPluginLoader;
import xyz.jpenilla.gremlin.runtime.platformsupport.PaperClasspathAppender;

import java.nio.file.Path;
import java.util.Set;

@SuppressWarnings("unused")
public class DependencyLoader implements PluginLoader {

    @Override
    public void classloader(PluginClasspathBuilder classpathBuilder) {
        /*
        var resolver = new MavenLibraryResolver();

        resolver.addRepository(new RemoteRepository.Builder("central","default","https://repo1.maven.org/maven2/").build());

        resolver.addDependency(new Dependency(new DefaultArtifact("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0"), null));
        resolver.addDependency(new Dependency(new DefaultArtifact("org.jetbrains.kotlin:kotlin-stdlib:2.1.10"), null));
        resolver.addDependency(new Dependency(new DefaultArtifact("org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.10"), null));
        resolver.addDependency(new Dependency(new DefaultArtifact("org.jetbrains.kotlin:kotlin-reflect:2.1.10"), null));
        resolver.addDependency(new Dependency(new DefaultArtifact("org.openjdk.nashorn:nashorn-core:15.4"), null));
        resolver.addDependency(new Dependency(new DefaultArtifact("com.zaxxer:HikariCP:5.1.0"), null));

        var loader = new DefaultsPaperPluginLoader();
        loader.classloader(classpathBuilder);
        new PaperClasspathAppender(classpathBuilder);
        classpathBuilder.addLibrary(resolver);

         */

        try {
            // Read the default dependencies.txt generated by Gremlin
            DependencySet deps = DependencySet.readDefault(this.getClass().getClassLoader());
            // Create a cache directory - you might want to customize this location
            Path cacheDir = Path.of("plugins/Waves/dependencies");
            DependencyCache cache = new DependencyCache(cacheDir);

            // Create the resolver and resolve dependencies
            try (DependencyResolver resolver = new DependencyResolver(org.slf4j.LoggerFactory.getLogger("Waves"))) {
                // Use PaperClasspathAppender to add the resolved jars to the classpath
                PaperClasspathAppender appender = new PaperClasspathAppender(classpathBuilder);
                Set<Path> jars = resolver.resolve(deps, cache).jarFiles();
                for (Path jar : jars) {
                    appender.append(jar);
                }
            }

            // Optional: cleanup old cached files
            cache.cleanup();
        } catch (Exception e) {
            e.printStackTrace();
        }


    }
}
